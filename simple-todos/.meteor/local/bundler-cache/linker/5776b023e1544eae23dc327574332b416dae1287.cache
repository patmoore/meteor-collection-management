[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nECMAScript = Package.ecmascript.ECMAScript;\nReactiveDict = Package['reactive-dict'].ReactiveDict;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nmain = Package.webapp.main;\nWebAppInternals = Package.webapp.WebAppInternals;\n_ = Package.underscore._;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nmeteorInstall = Package.modules.meteorInstall;\nBuffer = Package.modules.Buffer;\nprocess = Package.modules.process;\nSymbol = Package['ecmascript-runtime'].Symbol;\nMap = Package['ecmascript-runtime'].Map;\nSet = Package['ecmascript-runtime'].Set;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nAccounts = Package['accounts-base'].Accounts;\nAutoupdate = Package.autoupdate.Autoupdate;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/packages/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"imports\":{\"api\":{\"tasks.js\":[\"meteor/meteor\",\"meteor/mongo\",\"meteor/check\",function(require,exports){\n\n////////////////////////////////////////////////////////////////////////\n//                                                                    //\n// imports/api/tasks.js                                               //\n//                                                                    //\n////////////////////////////////////////////////////////////////////////\n                                                                      //\nexports.__esModule = true;                                            //\nexports.Tasks = undefined;                                            //\n                                                                      //\nvar _meteor = require('meteor/meteor');                               // 1\n                                                                      //\nvar _mongo = require('meteor/mongo');                                 // 2\n                                                                      //\nvar _check = require('meteor/check');                                 // 3\n                                                                      //\nvar Tasks = exports.Tasks = new _mongo.Mongo.Collection('tasks');     // 5\n                                                                      //\nif (_meteor.Meteor.isServer) {                                        // 7\n  // This code only runs on the server                                //\n  // Only publish tasks that are public or belong to the current user\n  _meteor.Meteor.publish('tasks', function () {                       // 10\n    function tasksPublication() {                                     // 10\n      return Tasks.find({                                             // 11\n        $or: [{ 'private': { $ne: true } }, { owner: this.userId }]   // 12\n      });                                                             //\n    }                                                                 //\n                                                                      //\n    return tasksPublication;                                          //\n  }());                                                               //\n}                                                                     //\n                                                                      //\n_meteor.Meteor.methods({                                              // 20\n  'tasks.insert': function () {                                       // 21\n    function tasksInsert(text) {                                      //\n      (0, _check.check)(text, String);                                // 22\n                                                                      //\n      // Make sure the user is logged in before inserting a task      //\n      if (!_meteor.Meteor.userId()) {                                 // 21\n        throw new _meteor.Meteor.Error('not-authorized');             // 26\n      }                                                               //\n                                                                      //\n      Tasks.insert({                                                  // 29\n        text: text,                                                   // 30\n        createdAt: new Date(),                                        // 31\n        owner: _meteor.Meteor.userId(),                               // 32\n        username: _meteor.Meteor.user().username                      // 33\n      });                                                             //\n    }                                                                 //\n                                                                      //\n    return tasksInsert;                                               //\n  }(),                                                                //\n  'tasks.remove': function () {                                       // 36\n    function tasksRemove(taskId) {                                    //\n      (0, _check.check)(taskId, String);                              // 37\n                                                                      //\n      Tasks.remove(taskId);                                           // 39\n    }                                                                 //\n                                                                      //\n    return tasksRemove;                                               //\n  }(),                                                                //\n  'tasks.setChecked': function () {                                   // 41\n    function tasksSetChecked(taskId, setChecked) {                    //\n      (0, _check.check)(taskId, String);                              // 42\n      (0, _check.check)(setChecked, Boolean);                         // 43\n                                                                      //\n      Tasks.update(taskId, { $set: { checked: setChecked } });        // 45\n    }                                                                 //\n                                                                      //\n    return tasksSetChecked;                                           //\n  }(),                                                                //\n  'tasks.setPrivate': function () {                                   // 47\n    function tasksSetPrivate(taskId, setToPrivate) {                  //\n      (0, _check.check)(taskId, String);                              // 48\n      (0, _check.check)(setToPrivate, Boolean);                       // 49\n                                                                      //\n      var task = Tasks.findOne(taskId);                               // 51\n                                                                      //\n      // Make sure only the task owner can make a task private        //\n      if (task.owner !== _meteor.Meteor.userId()) {                   // 47\n        throw new _meteor.Meteor.Error('not-authorized');             // 55\n      }                                                               //\n                                                                      //\n      Tasks.update(taskId, { $set: { 'private': setToPrivate } });    // 58\n    }                                                                 //\n                                                                      //\n    return tasksSetPrivate;                                           //\n  }()                                                                 //\n});                                                                   //\n////////////////////////////////////////////////////////////////////////\n\n}]}},\"server\":{\"main.js\":[\"meteor/meteor\",\"../imports/api/tasks.js\",function(require){\n\n////////////////////////////////////////////////////////////////////////\n//                                                                    //\n// server/main.js                                                     //\n//                                                                    //\n////////////////////////////////////////////////////////////////////////\n                                                                      //\nvar _meteor = require('meteor/meteor');                               // 1\n                                                                      //\nrequire('../imports/api/tasks.js');                                   // 2\n                                                                      //\n_meteor.Meteor.startup(function () {                                  // 4\n  // code to run on server at startup                                 //\n});                                                                   //\n////////////////////////////////////////////////////////////////////////\n\n}]}},{\"extensions\":[\".js\",\".json\"]});\nrequire(\"./server/main.js\");","servePath":"/app.js","sourceMap":{"version":3,"sources":["/imports/api/tasks.js","/server/main.js"],"names":[],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;AAEO,IAAM,wBAAQ,IAAI,aAAM,UAAN,CAAiB,OAArB,CAAR;;AAEb,IAAI,eAAO,QAAP,EAAiB;;;AAGnB,iBAAO,OAAP,CAAe,OAAf;AAAwB,aAAS,gBAAT,GAA4B;AAClD,aAAO,MAAM,IAAN,CAAW;AAChB,aAAK,CACH,EAAE,WAAS,EAAE,KAAK,IAAL,EAAX,EADC,EAEH,EAAE,OAAO,KAAK,MAAL,EAFN,CAAL;OADK,CAAP,CADkD;KAA5B;;WAAS;KAAjC,EAHmB;CAArB;;AAaA,eAAO,OAAP,CAAe;AACb;yBAAe,MAAM;AACnB,wBAAM,IAAN,EAAY,MAAZ;;;AADmB,UAIf,CAAE,eAAO,MAAP,EAAF,EAAmB;AACrB,cAAM,IAAI,eAAO,KAAP,CAAa,gBAAjB,CAAN,CADqB;OAAvB;;AAIA,YAAM,MAAN,CAAa;AACX,kBADW;AAEX,mBAAW,IAAI,IAAJ,EAAX;AACA,eAAO,eAAO,MAAP,EAAP;AACA,kBAAU,eAAO,IAAP,GAAc,QAAd;OAJZ,EARmB;;;;KADR;AAgBb;yBAAe,QAAQ;AACrB,wBAAM,MAAN,EAAc,MAAd,EADqB;;AAGrB,YAAM,MAAN,CAAa,MAAb,EAHqB;;;;KAhBV;AAqBb;6BAAmB,QAAQ,YAAY;AACrC,wBAAM,MAAN,EAAc,MAAd,EADqC;AAErC,wBAAM,UAAN,EAAkB,OAAlB,EAFqC;;AAIrC,YAAM,MAAN,CAAa,MAAb,EAAqB,EAAE,MAAM,EAAE,SAAS,UAAT,EAAR,EAAvB,EAJqC;;;;KArB1B;AA2Bb;6BAAmB,QAAQ,cAAc;AACvC,wBAAM,MAAN,EAAc,MAAd,EADuC;AAEvC,wBAAM,YAAN,EAAoB,OAApB,EAFuC;;AAIvC,UAAM,OAAO,MAAM,OAAN,CAAc,MAAd,CAAP;;;AAJiC,UAOnC,KAAK,KAAL,KAAe,eAAO,MAAP,EAAf,EAAgC;AAClC,cAAM,IAAI,eAAO,KAAP,CAAa,gBAAjB,CAAN,CADkC;OAApC;;AAIA,YAAM,MAAN,CAAa,MAAb,EAAqB,EAAE,MAAM,EAAE,WAAS,YAAT,EAAR,EAAvB,EAXuC;;;;KA3B5B;CAAf,uE;;;;;;;;;;;ACnBA;;AACA;;AAEA,eAAO,OAAP,CAAe,YAAM;;CAAN,CAAf,sE","file":"/app.js","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Mongo } from 'meteor/mongo';\nimport { check } from 'meteor/check';\n \nexport const Tasks = new Mongo.Collection('tasks');\n\nif (Meteor.isServer) {\n  // This code only runs on the server\n  // Only publish tasks that are public or belong to the current user\n  Meteor.publish('tasks', function tasksPublication() {\n    return Tasks.find({\n      $or: [\n        { private: { $ne: true } },\n        { owner: this.userId },\n      ],\n    });\n  });\n}\n\nMeteor.methods({\n  'tasks.insert'(text) {\n    check(text, String);\n \n    // Make sure the user is logged in before inserting a task\n    if (! Meteor.userId()) {\n      throw new Meteor.Error('not-authorized');\n    }\n \n    Tasks.insert({\n      text,\n      createdAt: new Date(),\n      owner: Meteor.userId(),\n      username: Meteor.user().username,\n    });\n  },\n  'tasks.remove'(taskId) {\n    check(taskId, String);\n \n    Tasks.remove(taskId);\n  },\n  'tasks.setChecked'(taskId, setChecked) {\n    check(taskId, String);\n    check(setChecked, Boolean);\n \n    Tasks.update(taskId, { $set: { checked: setChecked } });\n  },\n  'tasks.setPrivate'(taskId, setToPrivate) {\n    check(taskId, String);\n    check(setToPrivate, Boolean);\n \n    const task = Tasks.findOne(taskId);\n \n    // Make sure only the task owner can make a task private\n    if (task.owner !== Meteor.userId()) {\n      throw new Meteor.Error('not-authorized');\n    }\n \n    Tasks.update(taskId, { $set: { private: setToPrivate } });\n  },\n});","import { Meteor } from 'meteor/meteor';\nimport '../imports/api/tasks.js';\n\nMeteor.startup(() => {\n  // code to run on server at startup\n});\n"]}}]