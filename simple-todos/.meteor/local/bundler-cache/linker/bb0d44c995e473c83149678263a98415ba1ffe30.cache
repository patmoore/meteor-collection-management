[{"type":"js","data":"/* Imports for global scope */\n\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\n$ = Package.jquery.$;\njQuery = Package.jquery.jQuery;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nReactiveDict = Package['reactive-dict'].ReactiveDict;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\n_ = Package.underscore._;\nDDP = Package['ddp-client'].DDP;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nTemplate = Package.templating.Template;\nmeteorInstall = Package.modules.meteorInstall;\nBuffer = Package.modules.Buffer;\nprocess = Package.modules.process;\nSymbol = Package['ecmascript-runtime'].Symbol;\nMap = Package['ecmascript-runtime'].Map;\nSet = Package['ecmascript-runtime'].Set;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nAccounts = Package['accounts-base'].Accounts;\nAutoupdate = Package.autoupdate.Autoupdate;\nReload = Package.reload.Reload;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/packages/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"imports\":{\"ui\":{\"body.html\":[\"./template.body.js\",function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// imports/ui/body.html                                                                                         //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nmodule.exports = require(\"./template.body.js\");                                                                 // 1\n                                                                                                                // 2\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"template.body.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// imports/ui/template.body.js                                                                                  //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\n                                                                                                                // 1\nTemplate.body.addContent((function() {                                                                          // 2\n  var view = this;                                                                                              // 3\n  return HTML.DIV({                                                                                             // 4\n    \"class\": \"container\"                                                                                        // 5\n  }, \"\\n    \", HTML.HEADER(\"\\n      \", HTML.H1(\"Todo List (\", Blaze.View(\"lookup:incompleteCount\", function() {\n    return Spacebars.mustache(view.lookup(\"incompleteCount\"));                                                  // 7\n  }), \")\"), \"\\n\\n\\n      \", HTML.Raw('<label class=\"hide-completed\">\\n        <input type=\"checkbox\">\\n        Hide Completed Tasks\\n      </label>'), \"\\n\\n        \", Spacebars.include(view.lookupTemplate(\"loginButtons\")), \"\\n\\n      \", Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"currentUser\"));                                                          // 9\n  }, function() {                                                                                               // 10\n    return [ \"\\n        \", HTML.FORM({                                                                          // 11\n      \"class\": \"new-task\"                                                                                       // 12\n    }, \"\\n          \", HTML.INPUT({                                                                             // 13\n      type: \"text\",                                                                                             // 14\n      name: \"text\",                                                                                             // 15\n      placeholder: \"Type to add new tasks\"                                                                      // 16\n    }), \"\\n        \"), \"\\n      \" ];                                                                            // 17\n  }), \"\\n      \\n    \"), \"\\n \\n    \", HTML.UL(\"\\n      \", Blaze.Each(function() {                               // 18\n    return Spacebars.call(view.lookup(\"tasks\"));                                                                // 19\n  }, function() {                                                                                               // 20\n    return [ \"\\n        \", Spacebars.include(view.lookupTemplate(\"task\")), \"\\n      \" ];                        // 21\n  }), \"\\n    \"), \"\\n  \");                                                                                       // 22\n}));                                                                                                            // 23\nMeteor.startup(Template.body.renderToDocument);                                                                 // 24\n                                                                                                                // 25\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"task.html\":[\"./template.task.js\",function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// imports/ui/task.html                                                                                         //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nmodule.exports = require(\"./template.task.js\");                                                                 // 1\n                                                                                                                // 2\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"template.task.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// imports/ui/template.task.js                                                                                  //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\n                                                                                                                // 1\nTemplate.__checkName(\"task\");                                                                                   // 2\nTemplate[\"task\"] = new Template(\"Template.task\", (function() {                                                  // 3\n  var view = this;                                                                                              // 4\n  return HTML.LI({                                                                                              // 5\n    \"class\": function() {                                                                                       // 6\n      return Blaze.If(function() {                                                                              // 7\n        return Spacebars.call(view.lookup(\"checked\"));                                                          // 8\n      }, function() {                                                                                           // 9\n        return \"checked\";                                                                                       // 10\n      });                                                                                                       // 11\n    }                                                                                                           // 12\n  }, HTML.Raw('\\n    <button class=\"delete\">&times;</button>\\n \\n    '), HTML.INPUT({                           // 13\n    type: \"checkbox\",                                                                                           // 14\n    checked: function() {                                                                                       // 15\n      return Spacebars.mustache(view.lookup(\"checked\"));                                                        // 16\n    },                                                                                                          // 17\n    \"class\": \"toggle-checked\"                                                                                   // 18\n  }), \"\\n \\n    \", HTML.SPAN({                                                                                  // 19\n    \"class\": \"text\"                                                                                             // 20\n  }, HTML.STRONG(Blaze.View(\"lookup:username\", function() {                                                     // 21\n    return Spacebars.mustache(view.lookup(\"username\"));                                                         // 22\n  })), \" - \", Blaze.View(\"lookup:text\", function() {                                                            // 23\n    return Spacebars.mustache(view.lookup(\"text\"));                                                             // 24\n  })), \"\\n  \");                                                                                                 // 25\n}));                                                                                                            // 26\n                                                                                                                // 27\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"body.js\":[\"meteor/meteor\",\"meteor/templating\",\"../api/tasks.js\",\"meteor/reactive-dict\",\"./task.js\",\"./body.html\",function(require){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// imports/ui/body.js                                                                                           //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nvar _meteor = require('meteor/meteor');                                                                         // 1\n                                                                                                                //\nvar _templating = require('meteor/templating');                                                                 // 2\n                                                                                                                //\nvar _tasks = require('../api/tasks.js');                                                                        // 3\n                                                                                                                //\nvar _reactiveDict = require('meteor/reactive-dict');                                                            // 4\n                                                                                                                //\nrequire('./task.js');                                                                                           // 6\n                                                                                                                //\nrequire('./body.html');                                                                                         // 7\n                                                                                                                //\n_templating.Template.body.onCreated(function () {                                                               // 9\n  function bodyOnCreated() {                                                                                    // 9\n    this.state = new _reactiveDict.ReactiveDict();                                                              // 10\n    _meteor.Meteor.subscribe('tasks');                                                                          // 11\n  }                                                                                                             //\n                                                                                                                //\n  return bodyOnCreated;                                                                                         //\n}());                                                                                                           //\n                                                                                                                //\n_templating.Template.body.helpers({                                                                             // 14\n  tasks: function () {                                                                                          // 15\n    function tasks() {                                                                                          //\n                                                                                                                //\n      var instance = _templating.Template.instance();                                                           // 17\n      if (instance.state.get('hideCompleted')) {                                                                // 18\n        // If hide completed is checked, filter tasks                                                           //\n        return _tasks.Tasks.find({ checked: { $ne: true } }, { sort: { createdAt: -1 } });                      // 20\n      }                                                                                                         //\n                                                                                                                //\n      // Otherwise, return all of the tasks                                                                     //\n      return _tasks.Tasks.find({}, { sort: { createdAt: -1 } });                                                // 15\n    }                                                                                                           //\n                                                                                                                //\n    return tasks;                                                                                               //\n  }(),                                                                                                          //\n  incompleteCount: function () {                                                                                // 26\n    function incompleteCount() {                                                                                //\n      return _tasks.Tasks.find({ checked: { $ne: true } }).count();                                             // 27\n    }                                                                                                           //\n                                                                                                                //\n    return incompleteCount;                                                                                     //\n  }()                                                                                                           //\n});                                                                                                             //\n                                                                                                                //\n_templating.Template.body.events({                                                                              // 31\n  'submit .new-task': function () {                                                                             // 32\n    function submitNewTask(event) {                                                                             //\n      // Prevent default browser form submit                                                                    //\n      event.preventDefault();                                                                                   // 34\n                                                                                                                //\n      // Get value from form element                                                                            //\n      var target = event.target;                                                                                // 32\n      var text = target.text.value;                                                                             // 38\n                                                                                                                //\n      _meteor.Meteor.call('tasks.insert', text);                                                                // 40\n                                                                                                                //\n      // Clear form                                                                                             //\n      target.text.value = '';                                                                                   // 32\n    }                                                                                                           //\n                                                                                                                //\n    return submitNewTask;                                                                                       //\n  }(),                                                                                                          //\n  'change .hide-completed input': function () {                                                                 // 46\n    function changeHideCompletedInput(event, instance) {                                                        //\n      instance.state.set('hideCompleted', event.target.checked);                                                // 47\n    }                                                                                                           //\n                                                                                                                //\n    return changeHideCompletedInput;                                                                            //\n  }()                                                                                                           //\n});                                                                                                             //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"task.js\":[\"meteor/meteor\",\"meteor/templating\",\"../api/tasks.js\",\"./task.html\",function(require){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// imports/ui/task.js                                                                                           //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nvar _meteor = require('meteor/meteor');                                                                         // 1\n                                                                                                                //\nvar _templating = require('meteor/templating');                                                                 // 2\n                                                                                                                //\nvar _tasks = require('../api/tasks.js');                                                                        // 4\n                                                                                                                //\nrequire('./task.html');                                                                                         // 6\n                                                                                                                //\n_templating.Template.task.events({                                                                              // 8\n  'click .toggle-checked': function () {                                                                        // 9\n    function clickToggleChecked() {                                                                             //\n      // Set the checked property to the opposite of its current value                                          //\n      _meteor.Meteor.call('tasks.setChecked', this._id, !this.checked);                                         // 11\n    }                                                                                                           //\n                                                                                                                //\n    return clickToggleChecked;                                                                                  //\n  }(),                                                                                                          //\n  'click .delete': function () {                                                                                // 13\n    function clickDelete() {                                                                                    //\n      _meteor.Meteor.call('tasks.remove', this._id);                                                            // 14\n    }                                                                                                           //\n                                                                                                                //\n    return clickDelete;                                                                                         //\n  }()                                                                                                           //\n});                                                                                                             //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"api\":{\"tasks.js\":[\"meteor/meteor\",\"meteor/mongo\",\"meteor/check\",function(require,exports){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// imports/api/tasks.js                                                                                         //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nexports.__esModule = true;                                                                                      //\nexports.Tasks = undefined;                                                                                      //\n                                                                                                                //\nvar _meteor = require('meteor/meteor');                                                                         // 1\n                                                                                                                //\nvar _mongo = require('meteor/mongo');                                                                           // 2\n                                                                                                                //\nvar _check = require('meteor/check');                                                                           // 3\n                                                                                                                //\nvar Tasks = exports.Tasks = new _mongo.Mongo.Collection('tasks');                                               // 5\n                                                                                                                //\nif (_meteor.Meteor.isServer) {                                                                                  // 7\n  // This code only runs on the server                                                                          //\n  _meteor.Meteor.publish('tasks', function () {                                                                 // 9\n    function tasksPublication() {                                                                               // 9\n      return Tasks.find();                                                                                      // 10\n    }                                                                                                           //\n                                                                                                                //\n    return tasksPublication;                                                                                    //\n  }());                                                                                                         //\n}                                                                                                               //\n                                                                                                                //\n_meteor.Meteor.methods({                                                                                        // 14\n  'tasks.insert': function () {                                                                                 // 15\n    function tasksInsert(text) {                                                                                //\n      (0, _check.check)(text, String);                                                                          // 16\n                                                                                                                //\n      // Make sure the user is logged in before inserting a task                                                //\n      if (!_meteor.Meteor.userId()) {                                                                           // 15\n        throw new _meteor.Meteor.Error('not-authorized');                                                       // 20\n      }                                                                                                         //\n                                                                                                                //\n      Tasks.insert({                                                                                            // 23\n        text: text,                                                                                             // 24\n        createdAt: new Date(),                                                                                  // 25\n        owner: _meteor.Meteor.userId(),                                                                         // 26\n        username: _meteor.Meteor.user().username                                                                // 27\n      });                                                                                                       //\n    }                                                                                                           //\n                                                                                                                //\n    return tasksInsert;                                                                                         //\n  }(),                                                                                                          //\n  'tasks.remove': function () {                                                                                 // 30\n    function tasksRemove(taskId) {                                                                              //\n      (0, _check.check)(taskId, String);                                                                        // 31\n                                                                                                                //\n      Tasks.remove(taskId);                                                                                     // 33\n    }                                                                                                           //\n                                                                                                                //\n    return tasksRemove;                                                                                         //\n  }(),                                                                                                          //\n  'tasks.setChecked': function () {                                                                             // 35\n    function tasksSetChecked(taskId, setChecked) {                                                              //\n      (0, _check.check)(taskId, String);                                                                        // 36\n      (0, _check.check)(setChecked, Boolean);                                                                   // 37\n                                                                                                                //\n      Tasks.update(taskId, { $set: { checked: setChecked } });                                                  // 39\n    }                                                                                                           //\n                                                                                                                //\n    return tasksSetChecked;                                                                                     //\n  }()                                                                                                           //\n});                                                                                                             //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"startup\":{\"accounts-config.js\":[\"meteor/accounts-base\",function(require){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// imports/startup/accounts-config.js                                                                           //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nvar _accountsBase = require('meteor/accounts-base');                                                            // 1\n                                                                                                                //\n_accountsBase.Accounts.ui.config({                                                                              // 3\n  passwordSignupFields: 'USERNAME_ONLY'                                                                         // 4\n});                                                                                                             //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}},\"client\":{\"main.js\":[\"../imports/startup/accounts-config.js\",\"../imports/ui/body.js\",function(require){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// client/main.js                                                                                               //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nrequire('../imports/startup/accounts-config.js');                                                               // 1\n                                                                                                                //\nrequire('../imports/ui/body.js');                                                                               // 2\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}},{\"extensions\":[\".js\",\".json\",\".html\",\".css\"]});\nrequire(\"./client/main.js\");","servePath":"/app.js","sourceMap":{"version":3,"sources":["imports/ui/body.html","/imports/ui/template.body.js","imports/ui/task.html","/imports/ui/template.task.js","/imports/ui/body.js","/imports/ui/task.js","/imports/api/tasks.js","/imports/startup/accounts-config.js","/client/main.js"],"names":[],"mappings":"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","file":"/app.js","sourcesContent":["module.exports = require(\"./template.body.js\");\n","\nTemplate.body.addContent((function() {\n  var view = this;\n  return HTML.DIV({\n    \"class\": \"container\"\n  }, \"\\n    \", HTML.HEADER(\"\\n      \", HTML.H1(\"Todo List (\", Blaze.View(\"lookup:incompleteCount\", function() {\n    return Spacebars.mustache(view.lookup(\"incompleteCount\"));\n  }), \")\"), \"\\n\\n\\n      \", HTML.Raw('<label class=\"hide-completed\">\\n        <input type=\"checkbox\">\\n        Hide Completed Tasks\\n      </label>'), \"\\n\\n        \", Spacebars.include(view.lookupTemplate(\"loginButtons\")), \"\\n\\n      \", Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"currentUser\"));\n  }, function() {\n    return [ \"\\n        \", HTML.FORM({\n      \"class\": \"new-task\"\n    }, \"\\n          \", HTML.INPUT({\n      type: \"text\",\n      name: \"text\",\n      placeholder: \"Type to add new tasks\"\n    }), \"\\n        \"), \"\\n      \" ];\n  }), \"\\n      \\n    \"), \"\\n \\n    \", HTML.UL(\"\\n      \", Blaze.Each(function() {\n    return Spacebars.call(view.lookup(\"tasks\"));\n  }, function() {\n    return [ \"\\n        \", Spacebars.include(view.lookupTemplate(\"task\")), \"\\n      \" ];\n  }), \"\\n    \"), \"\\n  \");\n}));\nMeteor.startup(Template.body.renderToDocument);\n","module.exports = require(\"./template.task.js\");\n","\nTemplate.__checkName(\"task\");\nTemplate[\"task\"] = new Template(\"Template.task\", (function() {\n  var view = this;\n  return HTML.LI({\n    \"class\": function() {\n      return Blaze.If(function() {\n        return Spacebars.call(view.lookup(\"checked\"));\n      }, function() {\n        return \"checked\";\n      });\n    }\n  }, HTML.Raw('\\n    <button class=\"delete\">&times;</button>\\n \\n    '), HTML.INPUT({\n    type: \"checkbox\",\n    checked: function() {\n      return Spacebars.mustache(view.lookup(\"checked\"));\n    },\n    \"class\": \"toggle-checked\"\n  }), \"\\n \\n    \", HTML.SPAN({\n    \"class\": \"text\"\n  }, HTML.STRONG(Blaze.View(\"lookup:username\", function() {\n    return Spacebars.mustache(view.lookup(\"username\"));\n  })), \" - \", Blaze.View(\"lookup:text\", function() {\n    return Spacebars.mustache(view.lookup(\"text\"));\n  })), \"\\n  \");\n}));\n","import { Meteor } from 'meteor/meteor';\nimport { Template } from 'meteor/templating';\nimport { Tasks } from '../api/tasks.js';\nimport { ReactiveDict } from 'meteor/reactive-dict';\n \nimport './task.js';\nimport './body.html';\n\nTemplate.body.onCreated(function bodyOnCreated() {\n  this.state = new ReactiveDict();\n  Meteor.subscribe('tasks');\n});\n \nTemplate.body.helpers({\n    tasks() {\n\n    const instance = Template.instance();\n    if (instance.state.get('hideCompleted')) {\n      // If hide completed is checked, filter tasks\n      return Tasks.find({ checked: { $ne: true } }, { sort: { createdAt: -1 } });\n    }\n\n        // Otherwise, return all of the tasks\n    return Tasks.find({}, { sort: { createdAt: -1 } });\n  },\n    incompleteCount() {\n    return Tasks.find({ checked: { $ne: true } }).count();\n  },\n});\n\nTemplate.body.events({\n  'submit .new-task'(event) {\n    // Prevent default browser form submit\n    event.preventDefault();\n \n    // Get value from form element\n    const target = event.target;\n    const text = target.text.value;\n\n    Meteor.call('tasks.insert', text);\n \n    // Clear form\n    target.text.value = '';\n\n  },\n    'change .hide-completed input'(event, instance) {\n    instance.state.set('hideCompleted', event.target.checked);\n  },\n});","import { Meteor } from 'meteor/meteor';\nimport { Template } from 'meteor/templating';\n \nimport { Tasks } from '../api/tasks.js';\n \nimport './task.html';\n \nTemplate.task.events({\n  'click .toggle-checked'() {\n    // Set the checked property to the opposite of its current value\n    Meteor.call('tasks.setChecked', this._id, !this.checked);\n  },\n  'click .delete'() {\n    Meteor.call('tasks.remove', this._id);\n  },\n});","import { Meteor } from 'meteor/meteor';\nimport { Mongo } from 'meteor/mongo';\nimport { check } from 'meteor/check';\n \nexport const Tasks = new Mongo.Collection('tasks');\n\nif (Meteor.isServer) {\n  // This code only runs on the server\n  Meteor.publish('tasks', function tasksPublication() {\n    return Tasks.find();\n  });\n}\n\nMeteor.methods({\n  'tasks.insert'(text) {\n    check(text, String);\n \n    // Make sure the user is logged in before inserting a task\n    if (! Meteor.userId()) {\n      throw new Meteor.Error('not-authorized');\n    }\n \n    Tasks.insert({\n      text,\n      createdAt: new Date(),\n      owner: Meteor.userId(),\n      username: Meteor.user().username,\n    });\n  },\n  'tasks.remove'(taskId) {\n    check(taskId, String);\n \n    Tasks.remove(taskId);\n  },\n  'tasks.setChecked'(taskId, setChecked) {\n    check(taskId, String);\n    check(setChecked, Boolean);\n \n    Tasks.update(taskId, { $set: { checked: setChecked } });\n  },\n});","import { Accounts } from 'meteor/accounts-base';\n \nAccounts.ui.config({\n  passwordSignupFields: 'USERNAME_ONLY',\n});","import '../imports/startup/accounts-config.js';\nimport '../imports/ui/body.js';\n"]}}]