{"version":3,"sources":["meteor://ðŸ’»app/imports/ui/body.html","meteor://ðŸ’»app/imports/ui/template.body.js","meteor://ðŸ’»app/imports/ui/task.html","meteor://ðŸ’»app/imports/ui/template.task.js","meteor://ðŸ’»app/imports/ui/body.js","meteor://ðŸ’»app/imports/ui/task.js","meteor://ðŸ’»app/imports/api/tasks.js","meteor://ðŸ’»app/imports/startup/accounts-config.js","meteor://ðŸ’»app/client/main.js"],"names":[],"mappings":"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","file":"/app.js","sourcesContent":["module.exports = require(\"./template.body.js\");\n","\nTemplate.body.addContent((function() {\n  var view = this;\n  return HTML.DIV({\n    \"class\": \"container\"\n  }, \"\\n    \", HTML.HEADER(\"\\n      \", HTML.H1(\"Todo List (\", Blaze.View(\"lookup:incompleteCount\", function() {\n    return Spacebars.mustache(view.lookup(\"incompleteCount\"));\n  }), \")\"), \"\\n\\n\\n      \", HTML.Raw('<label class=\"hide-completed\">\\n        <input type=\"checkbox\">\\n        Hide Completed Tasks\\n      </label>'), \"\\n\\n        \", Spacebars.include(view.lookupTemplate(\"loginButtons\")), \"\\n\\n      \", Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"currentUser\"));\n  }, function() {\n    return [ \"\\n        \", HTML.FORM({\n      \"class\": \"new-task\"\n    }, \"\\n          \", HTML.INPUT({\n      type: \"text\",\n      name: \"text\",\n      placeholder: \"Type to add new tasks\"\n    }), \"\\n        \"), \"\\n      \" ];\n  }), \"\\n      \\n    \"), \"\\n \\n    \", HTML.UL(\"\\n      \", Blaze.Each(function() {\n    return Spacebars.call(view.lookup(\"tasks\"));\n  }, function() {\n    return [ \"\\n        \", Spacebars.include(view.lookupTemplate(\"task\")), \"\\n      \" ];\n  }), \"\\n    \"), \"\\n  \");\n}));\nMeteor.startup(Template.body.renderToDocument);\n","module.exports = require(\"./template.task.js\");\n","\nTemplate.__checkName(\"task\");\nTemplate[\"task\"] = new Template(\"Template.task\", (function() {\n  var view = this;\n  return HTML.LI({\n    \"class\": function() {\n      return [ Blaze.If(function() {\n        return Spacebars.call(view.lookup(\"checked\"));\n      }, function() {\n        return \"checked\";\n      }), \" \", Blaze.If(function() {\n        return Spacebars.call(view.lookup(\"private\"));\n      }, function() {\n        return \"private\";\n      }) ];\n    }\n  }, HTML.Raw('\\n    <button class=\"delete\">&times;</button>\\n \\n    '), HTML.INPUT({\n    type: \"checkbox\",\n    checked: function() {\n      return Spacebars.mustache(view.lookup(\"checked\"));\n    },\n    \"class\": \"toggle-checked\"\n  }), \"\\n\\n    \", Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"isOwner\"));\n  }, function() {\n    return [ \"\\n      \", HTML.BUTTON({\n      \"class\": \"toggle-private\"\n    }, \"\\n        \", Blaze.If(function() {\n      return Spacebars.call(view.lookup(\"private\"));\n    }, function() {\n      return \"\\n          Private\\n        \";\n    }, function() {\n      return \"\\n          Public\\n        \";\n    }), \"\\n      \"), \"\\n    \" ];\n  }), \"\\n \\n    \", HTML.SPAN({\n    \"class\": \"text\"\n  }, HTML.STRONG(Blaze.View(\"lookup:username\", function() {\n    return Spacebars.mustache(view.lookup(\"username\"));\n  })), \" - \", Blaze.View(\"lookup:text\", function() {\n    return Spacebars.mustache(view.lookup(\"text\"));\n  })), \"\\n  \");\n}));\n","import { Meteor } from 'meteor/meteor';\nimport { Template } from 'meteor/templating';\nimport { Tasks } from '../api/tasks.js';\nimport { ReactiveDict } from 'meteor/reactive-dict';\n \nimport './task.js';\nimport './body.html';\n\nTemplate.body.onCreated(function bodyOnCreated() {\n  this.state = new ReactiveDict();\n  Meteor.subscribe('tasks');\n});\n \nTemplate.body.helpers({\n    tasks() {\n\n    const instance = Template.instance();\n    if (instance.state.get('hideCompleted')) {\n      // If hide completed is checked, filter tasks\n      return Tasks.find({ checked: { $ne: true } }, { sort: { createdAt: -1 } });\n    }\n\n        // Otherwise, return all of the tasks\n    return Tasks.find({}, { sort: { createdAt: -1 } });\n  },\n    incompleteCount() {\n    return Tasks.find({ checked: { $ne: true } }).count();\n  },\n});\n\nTemplate.body.events({\n  'submit .new-task'(event) {\n    // Prevent default browser form submit\n    event.preventDefault();\n \n    // Get value from form element\n    const target = event.target;\n    const text = target.text.value;\n\n    Meteor.call('tasks.insert', text);\n \n    // Clear form\n    target.text.value = '';\n\n  },\n    'change .hide-completed input'(event, instance) {\n    instance.state.set('hideCompleted', event.target.checked);\n  },\n});","import { Meteor } from 'meteor/meteor';\nimport { Template } from 'meteor/templating';\n \nimport { Tasks } from '../api/tasks.js';\n \nimport './task.html';\n \nTemplate.task.helpers({\n  isOwner() {\n    return this.owner === Meteor.userId();\n  },\n});\n\nTemplate.task.events({\n  'click .toggle-checked'() {\n    // Set the checked property to the opposite of its current value\n    Meteor.call('tasks.setChecked', this._id, !this.checked);\n  },\n  'click .delete'() {\n    Meteor.call('tasks.remove', this._id);\n  },\n   'click .toggle-private'() {\n    Meteor.call('tasks.setPrivate', this._id, !this.private);\n  },\n});","import { Meteor } from 'meteor/meteor';\nimport { Mongo } from 'meteor/mongo';\nimport { check } from 'meteor/check';\n \nexport const Tasks = new Mongo.Collection('tasks');\n\nif (Meteor.isServer) {\n  // This code only runs on the server\n  // Only publish tasks that are public or belong to the current user\n  Meteor.publish('tasks', function tasksPublication() {\n    return Tasks.find({\n      $or: [\n        { private: { $ne: true } },\n        { owner: this.userId },\n      ],\n    });\n  });\n}\n\nMeteor.methods({\n  'tasks.insert'(text) {\n    check(text, String);\n \n    // Make sure the user is logged in before inserting a task\n    if (! Meteor.userId()) {\n      throw new Meteor.Error('not-authorized');\n    }\n \n    Tasks.insert({\n      text,\n      createdAt: new Date(),\n      owner: Meteor.userId(),\n      username: Meteor.user().username,\n    });\n  },\n  'tasks.remove'(taskId) {\n    check(taskId, String);\n\n    const task = Tasks.findOne(taskId);\n    if (task.private && task.owner !== Meteor.userId()) {\n      // If the task is private, make sure only the owner can delete it\n      throw new Meteor.Error('not-authorized');\n    }\n\n    Tasks.remove(taskId);\n  },\n  'tasks.setChecked'(taskId, setChecked) {\n    check(taskId, String);\n    check(setChecked, Boolean);\n\n    const task = Tasks.findOne(taskId);\n    if (task.private && task.owner !== Meteor.userId()) {\n      // If the task is private, make sure only the owner can check it off\n      throw new Meteor.Error('not-authorized');\n    }\n \n    Tasks.update(taskId, { $set: { checked: setChecked } });\n  },\n  'tasks.setPrivate'(taskId, setToPrivate) {\n    check(taskId, String);\n    check(setToPrivate, Boolean);\n \n    const task = Tasks.findOne(taskId);\n \n    // Make sure only the task owner can make a task private\n    if (task.owner !== Meteor.userId()) {\n      throw new Meteor.Error('not-authorized');\n    }\n \n    Tasks.update(taskId, { $set: { private: setToPrivate } });\n  },\n});","import { Accounts } from 'meteor/accounts-base';\n \nAccounts.ui.config({\n  passwordSignupFields: 'USERNAME_ONLY',\n});","import '../imports/startup/accounts-config.js';\nimport '../imports/ui/body.js';\n"]}